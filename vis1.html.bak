<!doctype html>
<html lang="zh-Hant">
<head>
  <meta charset="utf-8" />
  <title>六十四卦互動地圖（六維超立方體投影）</title>
  <script type="text/javascript" src="https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js"></script>
  <link href="https://unpkg.com/vis-network@9.1.2/styles/vis-network.min.css" rel="stylesheet" type="text/css" />
  <style>
    body { 
      font-family: "Noto Sans TC", "Microsoft JhengHei", sans-serif; 
      margin:0; 
      background: linear-gradient(135deg, #1a1a2e, #16213e);
      color: #e6d5d5;
    }
    #container { display:flex; height:100vh; }
    #mynetwork { 
      flex:1; 
      border-right:2px solid #444; 
      background: rgba(0,0,0,0.2);
      position: relative;
    }
    #panel { 
      width:450px; 
      padding:20px; 
      box-sizing:border-box; 
      overflow:auto; 
      background: rgba(0,0,0,0.8);
      backdrop-filter: blur(10px);
      transition: transform 0.3s ease;
    }
    .gua-title { 
      font-size:28px; 
      font-weight:700; 
      margin-bottom:8px; 
      color: #ffd700;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    }
    .gua-bits { 
      color:#88ff88; 
      margin-bottom:12px; 
      font-family: monospace;
      font-size: 16px;
      background: rgba(0,0,0,0.3);
      padding: 8px;
      border-radius: 6px;
    }
    .gua-symbol {
      font-size: 24px;
      margin: 10px 0;
      text-align: center;
      font-family: monospace;
      line-height: 1.2;
    }
    .change-list { margin-top:16px; }
    .change-item { 
      padding:10px; 
      border:1px solid #555; 
      margin-bottom:8px; 
      cursor:pointer; 
      border-radius:8px; 
      background: rgba(255,255,255,0.05);
      transition: all 0.3s ease;
    }
    .change-item:hover, .change-item:focus {
      background: rgba(255,255,255,0.1);
      border-color: #777;
    }
    .change-item:focus {
      outline: 2px solid #ffd700;
    }
    .highlight { 
      background: rgba(255,235,59,0.3) !important; 
      border-color: #ffd700 !important;
    }
    .btn { 
      display:inline-block; 
      padding:10px 16px; 
      border-radius:8px; 
      background: linear-gradient(135deg, #1976d2, #1565c0); 
      color:rgb(239, 231, 231); 
      text-decoration:none; 
      margin: 4px;
      transition: all 0.3s ease;
      border: none;
      cursor: pointer;
    }
    .btn:hover, .btn:focus {
      background: linear-gradient(135deg, #1565c0, #0d47a1);
      transform: translateY(-2px);
    }
    .btn:focus {
      outline: 2px solid #ffd700;
    }
    .btn-success {
      background: linear-gradient(135deg, #388e3c, #2e7d32);
    }
    .btn-success:hover, .btn-success:focus {
      background: linear-gradient(135deg, #2e7d32, #1b5e20);
    }
    .original-text {
      background: rgba(0,0,0,0.4);
      padding: 15px;
      border-radius: 8px;
      margin: 10px 0;
      border-left: 4px solid #ffd700;
    }
    .yao-text {
      margin: 8px 0;
      padding: 8px;
      background: rgba(255,255,255,0.05);
      border-radius: 4px;
      border-left: 3px solid #4ecdc4;
    }
    .panel-toggle {
      display: none;
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1000;
      background: linear-gradient(135deg, #1976d2, #1565c0);
      padding: 10px;
      border-radius: 8px;
      color: #fff;
      cursor: pointer;
    }
    .panel-toggle:hover, .panel-toggle:focus {
      background: linear-gradient(135deg, #1565c0, #0d47a1);
    }
    .panel-toggle:focus {
      outline: 2px solid #ffd700;
    }
    @media (max-width: 600px) {
      #panel {
        width: 100%;
        position: fixed;
        right: 0;
        transform: translateX(100%);
        height: 100vh;
        z-index: 999;
      }
      #panel.open {
        transform: translateX(0);
      }
      .panel-toggle {
        display: block;
      }
    }
    .controls {
      position: absolute;
      top: 20px;
      left: 20px;
      z-index: 1000;
      background: rgba(0,0,0,0.8);
      padding: 15px;
      border-radius: 10px;
      backdrop-filter: blur(10px);
    }
    .control-item {
      margin-bottom: 10px;
    }
    .control-item label {
      display: block;
      margin-bottom: 5px;
      color: #dacece;
      font-size: 14px;
    }
    .control-item select, .control-item input {
      background: #333;
      border: 1px solid #555;
      color: #f9f3f3;
      padding: 6px;
      border-radius: 4px;
      width: 100%;
    }
    .control-item select:focus, .control-item input:focus {
      outline: 2px solid #ffd700;
    }
  </style>
</head>
<body>
<div id="container">
  <div id="mynetwork">
    <div class="controls">
      <div class="control-item">
        <label for="layoutSelect">布局算法:</label>
        <select id="layoutSelect" aria-label="選擇網絡布局算法">
          <option value="barnesHut">Barnes-Hut (默認)</option>
          <option value="repulsion">斥力布局</option>
          <option value="hierarchical">階層布局</option>
          <option value="forceAtlas2">Force Atlas 2</option>
        </select>
      </div>
      <div class="control-item">
        <label for="nodeSizeSlider">節點大小:</label>
        <input type="range" id="nodeSizeSlider" min="10" max="40" value="18" aria-label="調整節點大小">
      </div>
      <div class="control-item">
        <label for="displayMode">顯示模式:</label>
        <select id="displayMode" aria-label="選擇顯示模式">
          <option value="all">所有卦象</option>
          <option value="bagua">八卦系統</option>
          <option value="palace">卦宮分類</option>
        </select>
      </div>
    </div>
    <button class="panel-toggle" id="panelToggle" aria-label="切換資訊面板">開啟面板</button>
  </div>
  <div id="panel">
    <div class="gua-title" id="guaName">點選節點查看卦象</div>
    <div class="gua-bits" id="guaBits"></div>
    <div class="gua-symbol" id="guaSymbol"></div>
    <div id="guaText"><em>卦辭 / 爻辭 會在此顯示。</em></div>
    <div class="change-list" id="changeList"></div>
    <div style="margin-top:16px;">
      <button class="btn" id="btnCenter" aria-label="重置網絡視角">重置視角</button>
      <button class="btn btn-success" id="btnRandomWalk" aria-label="隨機選擇卦象">隨機漫步</button>
      <div style="margin-top:12px; color:#ccc; font-size:13px;">
        說明：點選變卦可以跳至該卦並高亮。陽爻=1，陰爻=0，自上而下。<br>
        此為六維超立方體投影，每個卦象對應一個六維頂點。
      </div>
    </div>
  </div>
</div>

<script>
// 完整的六十四卦數據（僅示例，需補充完整《易經》文本）
const hexagramData = {
  "111111": {name: "乾", desc: "天行健，君子以自強不息", text: "元亨利貞。初九：潛龍勿用。九二：見龍在田，利見大人。九三：君子終日乾乾，夕惕若厲，無咎。九四：或躍在淵，無咎。九五：飛龍在天，利見大人。上九：亢龍有悔。"},
  "000000": {name: "坤", desc: "地勢坤，君子以厚德載物", text: "元亨，利牝馬之貞。初六：履霜，堅冰至。六二：直方大，不習無不利。六三：含章可貞，或從王事，無成有終。六四：括囊，無咎無譽。六五：黃裳，元吉。上六：龍戰於野，其血玄黃。"},
  "100010": {name: "屯", desc: "雲雷屯，君子以經綸", text: "元亨利貞，勿用有攸往，利建侯。初九：磐桓，利居貞，利建侯。六二：屯如邅如，乘馬班如，匪寇婚媾。六三：既鹿無虞，惟入於林中，君子幾不如舍，往吝。六四：乘馬班如，求婚媾，往吉，無不利。九五：屯其膏，小貞吉，大貞凶。上六：乘馬班如，泣血漣如。"},
  "010001": {name: "蒙", desc: "山下出泉，蒙", text: "亨。匪我求童蒙，童蒙求我。初筮告，再三瀆，瀆則不告。利貞。初六：發蒙，利用刑人，用說桎梏，以往吝。九二：包蒙吉，納婦吉，子克家。六三：勿用娶女，見金夫，不有躬，無攸利。六四：困蒙，吝。六五：童蒙，吉。上九：擊蒙，不利為寇，利禦寇。"},
  "111010": {name: "需", desc: "雲上於天，需", text: "有孚，光亨，貞吉，利涉大川。初九：需於郊，利用恆，無咎。九二：需於沙，小有言，終吉。九三：需於泥，致寇至。六四：需於血，出自穴。九五：需於酒食，貞吉。上六：入於穴，有不速之客三人來，敬之終吉。"},
  // ... 以下為示例，實際需補充其餘60卦的完整卦辭和爻辭
};

// 節點資料（文王卦序對應）
const guaNames = [
"乾","夬","大有","大壯","小畜","需","大畜","泰",
"履","兌","睽","歸妹","中孚","節","損","臨",
"同人","革","離","豐","家人","既濟","賁","明夷",
"無妄","隨","噬嗑","震","益","屯","頤","復",
"姤","大過","鼎","恆","巽","井","蠱","升",
"訟","困","未濟","解","渙","坎","蒙","師",
"遯","咸","旅","小過","漸","蹇","艮","謙",
"否","萃","晉","豫","觀","比","剝","坤"
];

const kingwenBits = [
"111111","111110","111101","111100","111011","111010","111001","111000",
"110111","110110","110101","110100","110011","110010","110001","110000",
"101111","101110","101101","101100","101011","101010","101001","101000",
"100111","100110","100101","100100","100011","100010","100001","100000",
"011111","011110","011101","011100","011011","011010","011001","011000",
"010111","010110","010101","010100","010011","010010","010001","010000",
"001111","001110","001101","001100","001011","001010","001001","001000",
"000111","000110","000101","000100","000011","000010","000001","000000"
];

// 八卦定義（用於顯示模式）
const bagua = {
  "111": "乾", "110": "兌", "101": "離", "100": "震",
  "011": "巽", "010": "坎", "001": "艮", "000": "坤"
};

// 卦宮分類（八宮）
const palaces = {
  "乾": ["111111", "111110", "111101", "111100", "111011", "111010", "111001", "111000"],
  "兌": ["110111", "110110", "110101", "110100", "110011", "110010", "110001", "110000"],
  "離": ["101111", "101110", "101101", "101100", "101011", "101010", "101001", "101000"],
  "震": ["100111", "100110", "100101", "100100", "100011", "100010", "100001", "100000"],
  "巽": ["011111", "011110", "011101", "011100", "011011", "011010", "011001", "011000"],
  "坎": ["010111", "010110", "010101", "010100", "010011", "010010", "010001", "010000"],
  "艮": ["001111", "001110", "001101", "001100", "001011", "001010", "001001", "001000"],
  "坤": ["000111", "000110", "000101", "000100", "000011", "000010", "000001", "000000"]
};

// 生成完整的卦辭數據
function generateHexagramTexts() {
  const texts = {};
  const yaoNames = ["初", "二", "三", "四", "五", "上"];
  
  guaNames.forEach((name, i) => {
    const bits = kingwenBits[i];
    if (hexagramData[bits]) {
      texts[bits] = hexagramData[bits];
    } else {
      texts[bits] = {
        name: name,
        desc: `${name}卦象徵意義的簡述`,
        text: `${name}：卦辭。${yaoNames.map((yao, j) => {
          const isYang = bits[j] === '1';
          return `${yao}${isYang ? '九' : '六'}：${name}${yao}爻辭。`;
        }).join(' ')}`
      };
    }
  });
  return texts;
}

const hexagramTexts = generateHexagramTexts();

// 建立 nodes 與 edges
const nodes = [];
const edges = [];
const bitToIndex = {};

for (let i = 0; i < kingwenBits.length; i++) {
  const bits = kingwenBits[i];
  const name = guaNames[i];
  const yangCount = bits.split('').reduce((a, b) => a + Number(b), 0);
  
  const colors = [
    '#4ecdc4', // 0陽 - 純陰
    '#45b7d1', // 1陽
    '#bb8fce', // 2陽
    '#82e0aa', // 3陽 - 平衡
    '#f7dc6f', // 4陽
    '#ff8e53', // 5陽
    '#ff6b6b'  // 6陽 - 純陽
  ];
  
  const color = colors[yangCount];
  const size = Math.max(15, 15 + yangCount * 2);
  
  nodes.push({
    id: i, 
    label: name, 
    title: `<b>${name}卦</b><br>${bits}<br>陽爻數量: ${yangCount}<br><small>點擊查看詳細</small>`, 
    bits: bits, 
    gua: name, 
    value: size,
    color: {background: color, border: '#333', highlight: {background: '#ffd700', border: '#ff8f00'}},
    font: {color: '#fff', size: 14, face: 'Arial'},
    upperTrigram: bits.slice(0, 3), // 上卦
    lowerTrigram: bits.slice(3, 6) // 下卦
  });
  bitToIndex[bits] = i;
}

// 創建邊（六維超立方體的邊，根據變爻位置著色）
const edgeColors = ['#ff6b6b', '#ff8e53', '#f7dc6f', '#82e0aa', '#45b7d1', '#4ecdc4']; // 第1至第6爻
for (let i = 0; i < kingwenBits.length; i++) {
  const bits = kingwenBits[i];
  for (let j = 0; j < 6; j++) {
    const nb = bits.split('');
    nb[j] = nb[j] === '1' ? '0' : '1';
    const nbstr = nb.join('');
    const k = bitToIndex[nbstr];
    if (k !== undefined && i < k) {
      edges.push({
        from: i,
        to: k,
        color: {color: edgeColors[j], opacity: 0.6},
        width: 1,
        smooth: {type: 'continuous'},
        title: `第${6-j}爻變`
      });
    }
  }
}

// 創建網絡
const container = document.getElementById('mynetwork');
const data = { nodes: nodes, edges: edges };
let options = {
  nodes: {
    shape: 'dot',
    size: 18,
    font: {size: 12, color: '#ffffff'},
    borderWidth: 2,
    shadow: true
  },
  edges: {
    width: 1,
    color: {color: '#666'},
    smooth: {type: 'continuous'}
  },
  physics: {
    stabilization: {iterations: 200},
    barnesHut: {
      gravitationalConstant: -4000, 
      springLength: 120,
      springConstant: 0.04,
      damping: 0.09
    }
  },
  interaction: {
    hover: true,
    selectConnectedEdges: false,
    keyboard: {enabled: true}
  }
};

const network = new vis.Network(container, data, options);

// 顯示卦象詳情
function showGua(idx, highlightLine = null) {
  const node = nodes[idx];
  const bits = node.bits;
  const hexData = hexagramTexts[bits];
  
  document.getElementById('guaName').innerText = `${node.gua}卦 （第${idx+1}卦）`;
  document.getElementById('guaBits').innerText = `六維坐標：${bits} （陽爻=1，陰爻=0）`;
  
  // 生成卦象符號
  const yaoSymbols = bits.split('').map(bit => bit === '1' ? '⚊' : '⚋').reverse();
  document.getElementById('guaSymbol').innerHTML = yaoSymbols.join('<br>');
  
  // 顯示卦辭和爻辭（分拆為獨立元素）
  const lines = hexData.text.split('。').filter(line => line.trim());
  const textHtml = `
    <div class="original-text">
      <h4>${hexData.name}卦</h4>
      <p><strong>象徵：</strong>${hexData.desc}</p>
      ${lines.map(line => `<div class="yao-text">${line}。</div>`).join('')}
    </div>
  `;
  
  // 列出變卦
  let changeHtml = '<h4>六個變卦（一爻變）</h4>';
  for (let j = 0; j < 6; j++) {
    const bitsArr = node.bits.split('');
    bitsArr[j] = bitsArr[j] === '1' ? '0' : '1';
    const newBits = bitsArr.join('');
    const newIdx = bitToIndex[newBits];
    const yaoPos = 6 - j;
    const yaoName = bitsArr[j] === '1' ? '陽' : '陰';
    changeHtml += `<div class="change-item" tabindex="0" onclick="jumpTo(${newIdx}, ${j})" onkeydown="if(event.key === 'Enter') jumpTo(${newIdx}, ${j})">
      <b>第${yaoPos}爻變${yaoName} → ${guaNames[newIdx]}卦</b><br>
      <small>${newBits}</small>
    </div>`;
  }
  
  document.getElementById('guaText').innerHTML = textHtml;
  document.getElementById('changeList').innerHTML = changeHtml;
  
  // 高亮當前節點
  network.selectNodes([idx]);
  network.focus(idx, {scale: 1.5, animation: {duration: 1000, easingFunction: 'easeInOutQuad'}});
  
  // 更新節點顏色
  const updates = nodes.map(n => ({
    id: n.id, 
    color: n.id === idx ? {background: '#ffd700', border: '#ff8f00'} : n.color
  }));
  network.setData({nodes: updates, edges: edges});
  
  // 開啟面板（行動裝置）
  if (window.innerWidth <= 600) {
    document.getElementById('panel').classList.add('open');
    document.getElementById('panelToggle').innerText = '關閉面板';
  }
}

// 跳轉到指定卦象
function jumpTo(idx, movedIndex) {
  showGua(idx);
  setTimeout(() => {
    const items = document.querySelectorAll('.change-item');
    items.forEach(item => item.classList.remove('highlight'));
    if (items[movedIndex]) {
      items[movedIndex].classList.add('highlight');
      items[movedIndex].focus();
    }
  }, 100);
}

// 網絡事件
network.on("click", function(params) {
  if (params.nodes.length > 0) {
    const idx = params.nodes[0];
    showGua(idx);
  }
});

network.on("hoverNode", function(params) {
  const nodeId = params.node;
  const connectedNodes = network.getConnectedNodes(nodeId);
  const updateArray = [];
  
  nodes.forEach(node => {
    if (node.id === nodeId || connectedNodes.includes(node.id)) {
      updateArray.push({id: node.id, color: {background: '#ffd700', border: '#ff8f00'}});
    } else {
      updateArray.push({id: node.id, color: node.color});
    }
  });
  
  network.setData({nodes: updateArray, edges: edges});
});

network.on("blurNode", function(params) {
  const updateArray = nodes.map(node => ({id: node.id, color: node.color}));
  network.setData({nodes: updateArray, edges: edges});
});

// 等待 DOM 載入完成後綁定事件
document.addEventListener('DOMContentLoaded', function() {
  const layoutSelect = document.getElementById('layoutSelect');
  const nodeSizeSlider = document.getElementById('nodeSizeSlider');
  const displayMode = document.getElementById('displayMode');
  const btnCenter = document.getElementById('btnCenter');
  const btnRandomWalk = document.getElementById('btnRandomWalk');
  const panelToggle = document.getElementById('panelToggle');

  // 檢查元素是否存在
  if (layoutSelect) {
    layoutSelect.onchange = function() {
      const layout = this.value;
      let newOptions = {...options};
      
      switch (layout) {
        case 'repulsion':
          newOptions.physics.solver = 'repulsion';
          break;
        case 'hierarchical':
          newOptions.layout = {hierarchical: {direction: 'UD', sortMethod: 'directed'}};
          break;
        case 'forceAtlas2':
          newOptions.physics.forceAtlas2Based = {gravitationalConstant: -50, springLength: 100};
          break;
        default:
          newOptions.physics.solver = 'barnesHut';
      }
      
      network.setOptions(newOptions);
    };
  }

  if (nodeSizeSlider) {
    nodeSizeSlider.oninput = function() {
      const size = parseInt(this.value);
      const updateArray = nodes.map(node => ({...node, size: size}));
      network.setData({nodes: updateArray, edges: edges});
    };
  }

  if (displayMode) {
    displayMode.onchange = function() {
      const mode = this.value;
      let filteredNodes = nodes;
      let filteredEdges = edges;
      
      if (mode === 'bagua') {
        filteredNodes = nodes.filter(node => node.upperTrigram === '111');
        filteredEdges = edges.filter(edge => 
          filteredNodes.some(n => n.id === edge.from) && filteredNodes.some(n => n.id === edge.to)
        );
      } else if (mode === 'palace') {
        filteredNodes = nodes.filter(node => palaces['乾'].includes(node.bits));
        filteredEdges = edges.filter(edge => 
          filteredNodes.some(n => n.id === edge.from) && filteredNodes.some(n => n.id === edge.to)
        );
      }
      
      network.setData({nodes: filteredNodes, edges: filteredEdges});
    };
  }

  if (btnCenter) {
    btnCenter.onclick = function() { 
      network.fit({animation: {duration: 1000, easingFunction: 'easeInOutQuad'}}); 
    };
  }

  if (btnRandomWalk) {
    btnRandomWalk.onclick = function() {
      const randomIdx = Math.floor(Math.random() * nodes.length);
      showGua(randomIdx);
    };
  }

  if (panelToggle) {
    panelToggle.onclick = function() {
      const panel = document.getElementById('panel');
      const isOpen = panel.classList.contains('open');
      panel.classList.toggle('open');
      this.innerText = isOpen ? '開啟面板' : '關閉面板';
    };
  }
});

// 效能優化：穩定後禁用物理模擬
network.on("stabilizationIterationsDone", function() {
  network.setOptions({ physics: { enabled: false } });
});

// 初始化
showGua(0);
network.stabilize();
</script>
</body>
</html>